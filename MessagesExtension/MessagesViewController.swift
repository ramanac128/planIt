//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Richmond Starbuck on 10/5/16.
//  Copyright Â© 2016 OneTwo Productions. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()

    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        let conversationManager = ConversationManager.instance
        conversationManager.masterMessagesViewController = self
        conversationManager.conversation = conversation
        
        if let message = conversation.selectedMessage {
            self.setupModel(message: message)
            self.performSegue(withIdentifier: "DateTimeResponder", sender: self)
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .expanded {
            if ConversationManager.instance.conversation?.selectedMessage == nil {
                self.performSegue(withIdentifier: "DateTimeSender", sender: self)
            }
            else {
                self.performSegue(withIdentifier: "DateTimeResponder", sender: self)
            }
        }
        else {
            self.dismiss(animated: true)
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    @IBAction func planMeeting(_ sender: UIButton) {
        self.requestPresentationStyle(.expanded)
    }
    
    func setupModel(message: MSMessage) {
        var model: TimeMatrixModel?
        if let url = message.url,
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false),
                let queryItems = components.queryItems {
            model = ConversationManager.instance.dateTimeModel(queryItems: queryItems)
        }
        TimeMatrixModelManager.instance.model = model
    }
}
